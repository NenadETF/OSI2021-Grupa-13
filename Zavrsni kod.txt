#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <ctype.h>
#include <unistd.h>
#include <dirent.h>

typedef struct korisnik 
{
    char k_ime[20];
    char lozinka[10];
    char ime[10];
    char prezime[15];
    char premium; // premium -> P, obicni -> O, admin -> A
    int brojac; 
} KOR;

FILE* fp; 


void login();
void newline(); 
void administrator();
void osnovni_nalog();
void nalog();
void premuium();
void napravinalog(); 
int checkName(char*); 
int checkPassword(char*);
void umanji(char*); 
void pregled_korisnika_iz_datoteke();
void brisanje_naloga();
void napravi_direktorijum();
void brisanje_direktorijuma();
void pregled_direktorijuma();
void kreiraj_fajl();
void obrisi_fajl();
void kopiranje_fajlova();
int provjeri_direktorijum(char*, char*);


int main() 
{
    login();
    return 0; 
}





void login() 
{
    int brp = 3; 
    int uslov;  
    char uKIme[20], uLozinka[10], buffer[50];
    char c; // Sluzi za prepoznanje da li je nalog obican ili premium
    do {
        uslov = 0; 
        printf("Korisnicko ime: "); fgets(uKIme, 20, stdin); // Unos korisnickog imena 
        printf("Lozinka: "); fgets(uLozinka, 10, stdin); // Unos sifre korisnickog naloga  
        
        // PROVJERA NALOGA ZA PRIJAVU
        fp = fopen("korisnickinalozi.dat", "rb"); 
        if(!fp) printf("Greska pri otvaranju datoteke.\n"); 
        else 
        {
            KOR input; // Struktura u koju cemo skladistiti sve podatke koji se citaju iz datoteke
            while(fread(&input, sizeof(KOR), 1, fp)) 
            {
                if((strncmp(uKIme, input.k_ime, strlen(input.k_ime))) == 0) // Provjera imena
                {
                    ++uslov;  
                    c = input.premium; 
                }
                else continue; 
                if((strncmp(uLozinka, input.lozinka, strlen(input.lozinka))) == 0) ++uslov; // Provjera lozinke
                else 
                {
                    --brp; 
                    break; 
                }
            }
            if(uslov == 2) 
            {                
                newline();
                newline();
                printf("Pristup omogucen.\n"); 
                fclose(fp); 
                newline();
                newline();
                newline();
                if(c == 'A') 
                {
                    umanji(input.k_ime);
                    administrator(); // U TRENUTKU POZIVANJA, DATOTEKA JE ZATVORENA
                }
                else if(c == 'P') 
                {
                    premium_nalog();
                }
                else 
                {
                    osnovni_nalog();
                }
            }
        }
        if(brp == 0)
        {
            printf("Odbijen pristup.\n"); 
            break; 
        }
    } while(uslov != 2);
    fclose(fp); 
}






void newline() 
{
    printf("\n");
}








void administrator() 
{
    int unos;
    do {
        // UNOS PODATAKA 
        printf("=================================================================================\n");
        printf("1: Pravljenje naloga\n");
        printf("2: Pregled naloga\n");
        printf("3: Brisanje naloga\n");
        printf("0: Odjava\n");
        printf("=================================================================================\n");
        printf("Unesite opciju: "); scanf("%d", &unos);
        getchar();
        if(unos == 1) napravinalog(); 
        else if(unos == 2) pregled_korisnika_iz_datoteke(); 
        else if(unos == 3) brisanje_naloga(); 
	else if(unos==0) { printf("Odjavljeni ste.");}
        else printf("Pogresan unos.\n");
    } while(unos != 0);
    newline();
    newline();
    newline();
    login();
}

void osnovni_nalog() 
{
    int unos;
    do {
        // UNOS PODATAKA 
        printf("=================================================================================\n");
        printf("1: Pravljenje direktorijuma\n");
        printf("2: Pregled direktorijuma\n");
        printf("3: Brisanje direktorijuma\n");
        printf("4: Kreiranje fajla\n");
        printf("5: Brisanje fajla\n");
        printf("6: Kopiranje fajlova\n");
        printf("0: Odjava\n");
        printf("=================================================================================\n");
        printf("Unesite opciju: "); scanf("%d", &unos);
        getchar();
        if(unos == 1) napravi_direktorijum(); 
        else if(unos == 2) pregled_direktorijuma(); 
        else if(unos == 3) brisanje_direktorijuma(); 
        else if(unos == 4) kreiraj_fajl();
        else if(unos == 5) obrisi_fajl();
        else if(unos == 6) kopiranje_fajlova();
	else if(unos==0) { printf("Odjavljeni ste.");}
        else printf("Pogresan unos.\n");
    } while(unos != 0);
    newline();
    newline();
    newline();
    login();
}

void premium_nalog() 
{
    int unos;
    do {
        // UNOS PODATAKA 
        printf("=================================================================================\n");
        printf("1: Pravljenje direktorijuma\n");
        printf("2: Pregled direktorijuma\n");
        printf("3: Brisanje direktorijuma\n");
        printf("4: Kreiranje fajla\n");
        printf("5: Brisanje fajla\n");
        printf("6: Kopiranje fajlova\n");
        printf("7: Statistika\n");
	printf("8: Kopiranje direktorijuma\n");
        printf("0: Odjava\n");
        printf("=================================================================================\n");
        printf("Unesite opciju: "); scanf("%d", &unos);
        getchar();
        if(unos == 1) napravi_direktorijum(); 
        else if(unos == 2) pregled_direktorijuma(); 
        else if(unos == 3) brisanje_direktorijuma(); 
        else if(unos == 4) kreiraj_fajl();
        else if(unos == 5) obrisi_fajl();
        else if(unos == 6) kopiranje_fajlova();
        else if(unos == 7) { printf("Funkcija za statistiku.\n"); }
	else if(unos == 8) { printf("Funkcija za kopiranje foldera.\n"); }
	else if(unos==0) { printf("Odjavljeni ste.");}
        else printf("Pogresan unos.\n");
    } while(unos != 0);
    newline();
    newline();
    newline();
    login();
}









// PRAVLJENJE NALOGA
void napravinalog() 
{
    // UNOS PODATAKA
    KOR nalog; 
    nalog.brojac = 20;
    int unos;
    printf("=================================================================================\n");
    printf("Ime: "); fgets(nalog.ime, 10, stdin); 
    printf("Prezime: "); fgets(nalog.prezime, 15, stdin); 
    int cName, cPass; // za provjeru validnosti korisnickog imena i sifre
    
    
    do {
        printf("Korisnicko ime: "); fgets(nalog.k_ime, 20, stdin);
        cName = checkName(nalog.k_ime);
    } while(cName < 0);
    
    
    do {
        printf("Lozinka: "); fgets(nalog.lozinka, 10, stdin);
        cPass = checkPassword(nalog.lozinka);
    } while(cPass < 0);
    
    
    printf("=================================================================================\n");
    printf("0: Obicni nalog\n");
    printf("1: Premium nalog\n");
    printf("=================================================================================\n");
    printf("Unesite opciju: "); scanf("%d", &unos);
    if(unos == 0) nalog.premium = 'O'; 
    else if(unos == 1) nalog.premium = 'P'; 
    
    
    // DODAVANJE U DATOTEKU
    fp = fopen("korisnickinalozi.dat", "ab");
    if(!fp) printf("Greska pri otvaranju datoteke.\n");
    else 
    {
        if(fwrite(&nalog, sizeof(KOR), 1, fp)) 
        {
            printf("Nalog uspjesno napravljen.\n");
            fclose(fp);
            return;
        }
    }
    fclose(fp);
}





// PROVJERA VALIDNOSTI KORISNICKOG IMENA
int checkName(char* name) 
{
    KOR input; 
    fp = fopen("korisnickinalozi.dat", "rb"); 
    if(!fp) printf("Greska pri otvaranju datoteke.\n");
    else 
    {
        while(fread(&input, sizeof(KOR), 1, fp)) 
        {
            if((strncmp(name, input.k_ime, strlen(input.k_ime))) == 0) 
            {
                newline();
                printf("Korisnicko ime vec postoji. Pokusajte ponovo.\n");
                newline();
                return -1;
            }
        }
    }
    fclose(fp);
    return 1;
}


// PROVJERA VALIDNOSTI LOZINKE
int checkPassword(char* pass) // do while petlja sa % za dobijanje ostatka koji je char
{
    if(strlen(pass) > 7 || strlen(pass) < 7) 
    {
        newline();
        printf("Lozinka treba da sadrzi tacno 6 cifara.\n");
        newline();
        return -1;
    }
    else 
    {
        for(int i = 0; i < strlen(pass) - 1; i++) 
        {
            if(pass[i] < '0' || pass[i] > '9') 
            {
                newline();
                printf("Lozinka treba da sadrzi iskljucivo cifre.\n");
                newline();
                return -1;
            }
        }
        return 1;
    }
}





void umanji(char* name) 
{
    KOR input;
    fp = fopen("korisnickinalozi.dat", "rb"); 
    if(!fp) printf("Greska pri otvaranju datoteke.\n");
    else 
    {
        while(fread(&input, sizeof(KOR), 1, fp)) 
        {
            if(strncmp(name, input.k_ime, strlen(input.k_ime)) == 0) 
                --input.brojac;
                if(input.brojac == 0) { /* Funkcija za mijenjanje sifre (funckionisace tako sto ce obrisati podaci tog naloga iz datoteke 
                                        i ponovo dodati u datoteku */ }
        }
    }
    fclose(fp);
}



void pregled_korisnika_iz_datoteke()
{
    fp = fopen("korisnickinalozi.dat", "rb"); 
    KOR k;
    if(fp)
    {
        while(fread(&k, sizeof(KOR),1, fp))
        {
            printf("Ime: %s Prezime: %s Korisnicko ime: %s sifra: %s\n", k.ime, k.prezime, k.k_ime, k.lozinka);
        }
        fclose(fp);
    }
    else {
        printf("Greska kod otvaranja\n");
        fclose(fp);
    }
}

void brisanje_naloga() 
{
    KOR preuzmi;
    char name[20];
    printf("Unesite korisnicko ime naloga kojeg zelite obrisati: "); fgets(name, 20, stdin); // Unos imena naloga kojeg zelimo obrisati
    
    FILE* ftemp = fopen("temp.dat", "wb"); // Pomocna binarna datoteka
    int found = 0; 
    
    fp = fopen("korisnickinalozi.dat", "rb"); // Otvaranje datoteke sa nalozima 
    if(!fp) printf("Greska pri otvaranju datoteke.\n");
    else 
    {
        while(fread(&preuzmi, sizeof(KOR), 1, fp)) 
        {
            if(strcmp(name, preuzmi.k_ime) == 0) 
            {
                printf("Datoteka uspjesno obrisana.\n");
                found = 1; 
            }
            else fwrite(&preuzmi, sizeof(KOR), 1, ftemp); // Prebacivanje svih naloga u pomocnu datoteku, osim naloga kojeg zelimo obrisati
        }
    }
    if(!found) printf("Nalog sa tim korisnickim imenom ne postoji.\n");
    fclose(fp);
    fclose(ftemp);
    
    if(remove("korisnickinalozi.dat") != 0) printf("Datoteka nije obrisana.\n");
    if(rename("temp.dat", "korisnickinalozi.dat") != 0) printf("Datoteka nije preimenovana.\n");
}







// FUNKCIJA ZA PRAVLJENJE DIREKTORIJUMA
void napravi_direktorijum() //Funkcija za pravljenje direktorijuma //
{
    char imedir[20];

    printf("Unesite ime direktorijuma koji zelite napraviti: ");
    scanf("%s", imedir);
    
    if (isupper(imedir[0]) == 0 && isdigit(imedir[0]) == 0) // Provjera ispravnosti unijetog naziva
    {
        printf("Prvo slovo naziva mora pocinjati velikim slovom ili cifrom.\n");
        napravi_direktorijum(); // Ako nije ispravan, ponovo se poziva funkcija
    }
    else 
    {
        int provjera = mkdir(imedir);
        if(!provjera) printf("Direktorijum uspjesno kreiran.\n");
        else 
        {
            printf("Greska pri kreiranju direktorijuma.\n");
            napravi_direktorijum();
        }
    }
}



// FUNKCIJA ZA BRISANJE DIREKTORIJUMA//
void brisanje_direktorijuma ()
{
    int rezultat = 0;
    char direktorijum[20];
    char cmd[30];
    printf("Unesite ime direktorijuma koji zelite da izbrisete: ");
    scanf("%s", direktorijum);
    sprintf(cmd, "rmdir %s", direktorijum);
     // printf("Ovo je komanda: %s\n", cmd);
    rezultat = system(cmd);

    if (rezultat == 0)
        printf("Uspjesno je izbrisan.\n");
    else
        printf("Brisanje nije uspjelo jer ne postiji unijeti direktorijum.\n");
}



// FUNKCIJA ZA PREGLED DIREKTORIJUMA
void pregled_direktorijuma() 
{
    struct dirent* ulazak; // Pokazivac na tok
    char ime_dir[20];
    
    printf("Unesite ime direktorijuma kojeg zelite pregledati: "); scanf("%s", ime_dir);
    int fajlovi = 0; 
    
    DIR* dir = opendir(ime_dir);
    if(dir == NULL) 
    {
        printf("Direktorijum sa unesenim nazivom ne postoji. Pokusajte ponovo.\n");
        pregled_direktorijuma();
    }
    
    while((ulazak = readdir(dir))) 
    {
        fajlovi++;
        printf("Fajl %d: %s\n", fajlovi, ulazak->d_name);
    }
    closedir(dir);
}


// FUNKCIJA ZA KREIRANJE FAJLA
void kreiraj_fajl() 
{
    char* name = (char*)malloc(20*sizeof(char));
    char* dir_name = (char*)malloc(80*sizeof(char));
    char* full_name = (char*)malloc(120*sizeof(char));
    printf("Unesite ime fajla: "); fgets(name, 20, stdin);
    
    if(isupper(name[0]) && isdigit(name[0])) 
    {
        printf("Prvo slovo imena mora biti veliko ili moze da bude cifra. Pokusajte ponovo.\n");
        kreiraj_fajl();
    }
    
    int len = strlen(name);
    const char* last_four = &name[len - 5];
    
    if(strncmp(last_four, ".txt", 4) != 0) 
    {
        printf("Fajl mora da sadrzi ekstenziju .txt\n");
        kreiraj_fajl();
    }
    
    printf("Unesite putanju direktorijuma: "); scanf("%s", dir_name); // Unos putanje do direktorijuma
    
    int rez = provjeri_direktorijum(dir_name, name);
    if(rez < 0) 
    {
        free(name); free(dir_name); free(full_name);  // Oslobodi memoriju
        kreiraj_fajl(); // Ako se pojavi bilo kakva greska, ponovice se funkcija
    }
    
    strtok(name, "\n");
    strtok(dir_name, "\n");
    strcpy(full_name, dir_name);
    strcat(full_name, "\\");
    strcat(full_name, name);
    
    
    FILE* dat = fopen(full_name, "w");
    if(dat) printf("Datoteka ubacena.\n");
    if(!dat) printf("Datoteka nije ubacena.\n");

    
    free(name); free(dir_name); free(full_name);
    fclose(dat);
}



int provjeri_direktorijum(char* dir_name, char* file_name) 
{
    struct dirent* entry; 
    DIR* dir = opendir(dir_name);
    if(dir == NULL) 
    {
        printf("Direktorijum sa tim imenom ne postoji.\n");
        return -1;
    }
    if(dir) printf("Direktorijum postoji.\n");
    newline();
    while((entry = readdir(dir)))
    {
        if(strcmp(file_name, entry->d_name) == 0) 
        {
            printf("Fajl sa tim imenom već postoji.\n");
            closedir(dir);
            return -1;
        }
    }
    closedir(dir);
    return 1;
}



// FUNKCIJA ZA BRISANJE FAJLA
void obrisi_fajl()
{
    struct dirent* ulazak;
    DIR* dir; 
    char* ime_fajla = (char*)malloc(20*sizeof(char));
    char* dir_ime = (char*)malloc(80*sizeof(char));
    char* puno_ime = (char*)malloc(120*sizeof(char));
    
    printf("Unesite ime fajla koji zelite da izbrisete: "); //Kada unosite ime fajla, unesite ga u obliku ime_fajla.txt
    gets(ime_fajla);
    strtok(ime_fajla, "\n"); // Uklanjamo novi red kako bi fopen primila argument
    


    // Provjera validnosti
    if(isupper(ime_fajla[0]) && isdigit(ime_fajla[0])) 
    {
        printf("Prvo slovo imena mora biti veliko ili moze da bude cifra. Pokusajte ponovo.\n");
        free(ime_fajla); free(dir_ime); free(puno_ime);
        obrisi_fajl();
    }
    
    int len = strlen(ime_fajla);
    const char* last_four = &ime_fajla[len - 4];
    
    if(strncmp(last_four, ".txt", 4) != 0) 
    {
        printf("Fajl mora da sadrzi ekstenziju .txt\n");
        free(ime_fajla); free(dir_ime); free(puno_ime);
        obrisi_fajl();
    }
    
    
    
    
    printf("Unesite putanju foldera: "); fgets(dir_ime, 80, stdin);
    strtok(dir_ime, "\n");
    
    strcpy(puno_ime, dir_ime);
    strcat(puno_ime, "\\");
    strcat(puno_ime, ime_fajla);
    
    
    // Otvaranje direktorijuma i provjera postojanja unesenog fajla
    dir = opendir(dir_ime);
    if(dir == NULL) 
    {
        printf("Uneseni direktorijum ne postoji.\n");
        free(ime_fajla); free(dir_ime); free(puno_ime);
        obrisi_fajl();
    }
    while((ulazak = readdir(dir))) 
    {
        if(strcmp(ime_fajla, ulazak->d_name) == 0) 
        {
            remove(puno_ime);
            printf("Datoteka uspjesno uklonjena\n");
            free(ime_fajla); free(dir_ime); free(puno_ime);
            return;
        }
    }
    printf("Datoteka koju ste unijeli ne postoji u folderu.\n");
    free(ime_fajla); free(dir_ime); free(puno_ime);
    obrisi_fajl();
 }







// FUNKCIJA ZA KOPIRANJE FAJLOVA
void kopiranje_fajlova() 
{
    struct dirent* entry;
    DIR* dir;
    char* name = (char*)malloc(20*sizeof(char));
    char* dir_name = (char*)malloc(80*sizeof(char));
    char* full_name = (char*)malloc(120*sizeof(char));
    
    printf("Unesite ime fajla kojeg zelite kopirati: "); scanf("%s", name);
    strtok(name, "\n");
    printf("Unesite putanju foldera u kojem se taj fajl nalazi: "); scanf("%s", dir_name);
    strtok(dir_name, "\n");
    
    
    
    
    // Provjera validnosti
    if(isupper(name[0]) && isdigit(name[0])) 
    {
        printf("Prvo slovo imena mora biti veliko ili moze da bude cifra. Pokusajte ponovo.\n");
        free(name); free(dir_name); free(full_name);
        kopiranje_fajlova();
    }
    
    int len = strlen(name);
    const char* last_four = &name[len - 4];
    
    if(strncmp(last_four, ".txt", 4) != 0 && strncmp(last_four, ".dat", 4)) 
    {
        printf("Fajl mora da sadrzi ekstenziju .txt ili .dat\n");
        free(name); free(dir_name); free(full_name);
        kopiranje_fajlova();
    }
    
    
    strcpy(full_name, dir_name);
    strcat(full_name, "\\");
    strcat(full_name, name);
    
    
    
    
    // Otvaranje direktorijuma i provjera postojanja unesenog fajla
    dir = opendir(dir_name);
    if(dir == NULL) 
    {
        printf("Uneseni direktorijum ne postoji.\n");
        free(name); free(dir_name); free(full_name);
        kopiranje_fajlova();
    }
    while((entry = readdir(dir))) 
    {
        if(strcmp(name, entry->d_name) == 0) 
        {
            if(strcmp(last_four, ".txt") == 0) 
            {
                FILE* fin = fopen(full_name, "r"); 
                char* newPath = (char*)malloc(80*sizeof(char));
                char* newFullPath = (char*)malloc(120*sizeof(char));
                printf("Unesite novu putanju: "); scanf("%s", newPath);
                strtok(newPath, "\n");
                
                strcpy(newFullPath, newPath);
                strcat(newFullPath, "\\");
                strcat(newFullPath, name);
                
                FILE* fout = fopen(newFullPath, "w");
                char c = fgetc(fin);
                while(c != EOF) 
                {
                    fputc(c, fout);
                    c = fgetc(fin);
                }
                fclose(fin); fclose(fout);
                free(newPath); free(newFullPath);
            }
            else 
            {
                FILE* fin = fopen(full_name, "rb"); 
                char* newPath = (char*)malloc(80*sizeof(char));
                char* newFullPath = (char*)malloc(120*sizeof(char));
                printf("Unesite novu putanju: "); scanf("%s", newPath);
                strtok(newPath, "\n");
                
                strcpy(newFullPath, newPath);
                strcat(newFullPath, "\\");
                strcat(newFullPath, name);
                
                FILE* fout = fopen(newFullPath, "wb");
                KOR input;
                while((fread(&input, sizeof(KOR), 1, fin))) 
                {
                    fwrite(&input, sizeof(KOR), 1, fout);
                }
                fclose(fin); fclose(fout);
                free(newPath); free(newFullPath);
            }
            free(name); free(dir_name); free(full_name);
            return;
        }
    }
    printf("Datoteka koju ste unijeli ne postoji.\n");
    free(name); free(dir_name); free(full_name);
    kopiranje_fajlova();
}